<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:mi="http://materialdesigninxaml.net/winfx/xaml/themes"
     xmlns:UI="clr-namespace:TrireksaApp"
    xmlns:mui="http://firstfloorsoftware.com/ModernUI" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:System="clr-namespace:System;assembly=mscorlib" mc:Ignorable="d">

    <!-- derive from Light or Dark theme-->
    <Style x:Key="OPanel" TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="Margin" Value="1" />
        <Setter Property="Height" Value="40"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource AccentColor}" Opacity="0"/>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="Width" Value="100"/>
                <Setter Property="FontWeight" Value="Heavy"/>
            </Style>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="2"/>
                 <Setter Property="Width" Value="200"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Width" Value="200"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Width" Value="Auto"/>
            </Style>

            <Style  TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="2"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" >
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource AccentColor}"></SolidColorBrush>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="mi:PackIcon">
                <Setter Property="Foreground" Value="AliceBlue"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="SearchText" TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource AccentColor}" Opacity="0"/>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>
            <Style TargetType="mi:PackIcon">
                <Setter Property="Kind" Value="Yeast"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Width" Value="30"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                

            </Style>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Margin" Value="5"/>
    </Style>
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Margin" Value="0,5"/>
    </Style>
    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5"/>
    </Style>


    <Style x:Key="ListViewItemNotFocusable" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource ItemText}"/>
        <Setter Property="Padding"
                Value="5,2,5,2"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Name="Selection" Visibility="Collapsed" />
                        <!-- This is used when GridView is put inside the ListView -->
                        <GridViewRowPresenter Grid.RowSpan="2"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        <!-- This is used for ListView that does not use GridView -->
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      Visibility="Collapsed"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Selection" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Selection" Property="Background" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextHover}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Selection" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Selection" Property="Background" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextSelected}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonUpdate" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Content">
            <Setter.Value>
                <Grid >
                    <mi:PackIcon x:Name="priceIcon" Kind="Rotate3d" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <mi:PackIcon.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=progressRing,Path=IsActive}" Value="True">
                                        <Setter Property="mi:PackIcon.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </mi:PackIcon.Style>
                    </mi:PackIcon>
                    <mui:ModernProgressRing x:Name="progressRing" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"   Opacity="0.5" Margin="0"/>
                </Grid>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="UI:FocusAdvancement.AdvancesByEnterKey" Value="True"/>
    </Style>

    <Style TargetType="PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="UI:FocusAdvancement.AdvancesByEnterKey" Value="True"/>
    </Style>

    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="UI:FocusAdvancement.AdvancesByEnterKey" Value="True"/>
    </Style>


</ResourceDictionary>
